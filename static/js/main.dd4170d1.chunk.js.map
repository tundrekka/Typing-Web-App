{"version":3,"sources":["firebase/firebase-config.js","helpers/getTextById.js","helpers/getTextFirestore.js","types/types.js","actions/ui.js","actions/texts.js","components/activePage/ButtonsAndLogic.jsx","components/activePage/ButtonsContainer.jsx","helpers/mobileLogic.js","hooks/useForm.js","components/activePage/StatusMessage.jsx","components/activePage/StatsContainer.jsx","components/utils/ReloadButton.jsx","components/activePage/TypingText.jsx","components/activePage/TextAndStats.jsx","components/ActivePage.jsx","helpers/getTextFromStore.js","components/homePage/Dropdown.jsx","components/homePage/StartButton.jsx","components/homePage/About.jsx","components/homePage/UsageGuide.jsx","components/homePage/TextContent.jsx","components/homePage/Title.jsx","components/homePage/MainContent.jsx","components/ui/sidebar/Sidebar.jsx","components/HomePage.jsx","routers/AppRouter.jsx","reducers/textsReducer.js","reducers/uiReducer.js","store/store.js","TypingApp.jsx","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","loadTextById","id","a","doc","get","undefined","textSnap","data","content","errType","loadTextsId","collection","orderBy","textsSnap","texts","forEach","snapChild","push","console","error","types","setLoadingTrue","type","setLoadingFalse","setErrorMessage","msg","payload","reloadRequest","state","setDropdown","setFinalText","text","setTextslist","setTypingTextId","textId","ButtonsAndLogic","component","dispatch","useDispatch","useSelector","ui","finished","active","useState","startStop","setStartStop","handleStart","e","document","getElementById","blur","querySelector","focus","Button","onClick","variant","color","autoFocus","scrollIntoView","container","children","span","classList","remove","to","ButtonsContainer","useEffect","className","mobileLogic","datatext","datalength","ite","textareaLength","textareaLastValue","keyValue","nativeEvent","length","txtAreaL","current","txtAreaLastVL","inputType","times","autocompleteMatched","datasliced","slice","includes","add","index","useForm","initialState","values","setValues","reset","resetValue","handleInputChange","target","name","value","StatusMessage","restart","hidden","formValues","handleTextareaChange","demoText","iterator","useRef","textareLastValue","setTimeout","hiddenInput","onclick","cols","rows","onChange","event","style","position","right","top","background","outline","border","zIndex","opacity","resize","fontSize","StatsContainer","ReloadButton","React","memo","loading","disabled","startIcon","Cached","TypingText","errorMsg","split","textAlign","map","letter","KeyboardReturn","display","justifyContent","marginTop","padding","borderRadius","width","TextAndStats","ActivePage","history","textsList","reload","demoTextId","useParams","find","getTextFromStore","replace","startLoadingTextById","Dropdown","typingTextsDropdown","typingTextId","title","StartButton","About","UsageGuide","left","TextContent","showAbout","setShowAbout","marginBottom","cursor","Title","MainContent","Sidebar","AccountBox","HomePage","log","AppRouter","exact","path","lastPath","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","TypingApp","theme","createMuiTheme","palette","primary","main","secondary","ThemeProvider","ReactDOM","render"],"mappings":"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","file":"static/js/main.dd4170d1.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\n\r\nconst firebaseConfig = {\r\n   apiKey: 'AIzaSyAu8R2dliBO2nQ3pc5MvX0to1k8t2n7gtQ',\r\n   authDomain: 'react-practices-b915b.firebaseapp.com',\r\n   databaseURL: 'https://react-practices-b915b-default-rtdb.firebaseio.com',\r\n   projectId: 'react-practices-b915b',\r\n   storageBucket: 'react-practices-b915b.appspot.com',\r\n   messagingSenderId: '350501490135',\r\n   appId: '1:350501490135:web:c830a5bc1321bd4b22cf92',\r\n   measurementId: 'G-L53B3RPBQG'\r\n };\r\n// Initialize Firebase\r\nfirebase.initializeApp( firebaseConfig );\r\n\r\nconst db = firebase.firestore();\r\n\r\n// const googleAuthProvider = new firebase.auth.GoogleAuthProvider()\r\n\r\nexport { db, firebase }\r\n","import { db } from '../firebase/firebase-config';\r\n\r\n\r\nexport const loadTextById = async( id ) => {\r\n\r\n   try {\r\n      const textSnap = await db.doc( `texts/content/paragraphs/${id}` ).get()\r\n      if( textSnap.data() !== undefined ) {\r\n         return {\r\n            id,\r\n            ...textSnap.data(),\r\n         }\r\n      } else return { content: false, errType: 'wrongURL' } \r\n\r\n   } catch ( error ) {\r\n      if( error ) {\r\n         return { content: false, errType: 'offline' }\r\n      } else return { content: false, errType: 'wrongURL' }\r\n      \r\n   }\r\n\r\n}\r\n","import { db } from '../firebase/firebase-config';\r\n\r\n\r\nexport const loadTextsId = async() => {\r\n\r\n   try {\r\n      const textsSnap = await db.collection( 'texts/ids/ids-title' ).orderBy( 'title' ).get()\r\n      const texts = [];\r\n      textsSnap.forEach( snapChild => {\r\n         texts.push({\r\n            id: snapChild.id,\r\n            ...snapChild.data()\r\n         })\r\n      })\r\n      return texts\r\n   } catch ( error ) {\r\n      console.error( error )\r\n      return []\r\n   }\r\n\r\n}\r\n","\r\nexport const types = {\r\n   \r\n   uiSetActiveTrue: '[UI] Set active true',\r\n   uiSetActiveFalse: '[UI] Set active false',\r\n   uiSetFinished: '[UI] Set finished',\r\n   uiRestart: '[UI] Restart',\r\n   uiClean: '[UI] Clean',\r\n   uiSetLastPath: '[UI] last path',\r\n   uiSetLoadingTrue: '[UI] loading true',\r\n   uiSetLoadingFalse: '[UI] loading false',\r\n   uiErrorMsg: '[UI] error message',\r\n   uiReloadRequest: '[UI] reload request',\r\n   uiRestartFalse: '[UI] restart false',\r\n   \r\n   textDropdown: '[Text] set dropdown',\r\n   textSetFinalText: '[Text] final Text request',\r\n   textSetTextsList: '[Text] texts List',\r\n   textSetTypingTextId: '[Text] SetTypingTextId',\r\n}\r\n","import { types } from '../types/types';\r\n\r\n\r\nexport const setActive = () => ({\r\n   type: types.uiSetActiveTrue,\r\n})\r\n\r\nexport const setFalse = () => ({\r\n   type: types.uiSetActiveFalse\r\n})\r\n\r\nexport const setFinished = () => ({\r\n   type: types.uiSetFinished,\r\n\r\n})\r\n\r\nexport const restart = () => ({\r\n   type: types.uiRestart\r\n})\r\nexport const restartFalse = () => ({\r\n   type: types.uiRestartFalse\r\n})\r\n\r\nexport const clean = () => ({\r\n   type: types.uiClean\r\n})\r\n\r\nexport const setLoadingTrue = () => ({\r\n   type: types.uiSetLoadingTrue,\r\n})\r\nexport const setLoadingFalse = () => ({\r\n   type: types.uiSetLoadingFalse,\r\n})\r\n\r\nexport const setErrorMessage = ( msg ) => ({\r\n   type: types.uiErrorMsg,\r\n   payload: msg\r\n})\r\n\r\nexport const reloadRequest = ( state ) => ({\r\n   type: types.uiReloadRequest,\r\n   payload: state\r\n})\r\n","import { loadTextById } from '../helpers/getTextById'\r\nimport { loadTextsId } from '../helpers/getTextFirestore'\r\nimport { types } from '../types/types'\r\nimport { reloadRequest, setErrorMessage, setLoadingFalse, setLoadingTrue } from './ui'\r\n\r\nexport const startLoadingTextsId = () => {\r\n   return async( dispatch ) => {\r\n\r\n      dispatch( setLoadingTrue() )\r\n\r\n      try {\r\n         const texts = await loadTextsId()\r\n\r\n         if( texts.length < 1 ) {\r\n            dispatch( setErrorMessage( 'Check your connection and try again' ) )\r\n            \r\n         } else dispatch( setErrorMessage( false ) )\r\n\r\n         dispatch( reloadRequest( false ) )\r\n         dispatch( setLoadingFalse() )\r\n         dispatch( setDropdown( texts ) )\r\n\r\n      } catch ( error ) {\r\n         console.log( error )\r\n      }\r\n\r\n   }\r\n}\r\n\r\nexport const startLoadingTextById = ( textId, history ) => {\r\n   return async( dispatch ) => {\r\n      dispatch( setLoadingTrue() )\r\n      try {\r\n         const { content, id, errType } = await loadTextById( textId )\r\n         dispatch( setLoadingFalse() )\r\n         dispatch( reloadRequest( false ) )\r\n\r\n         if( errType && errType === 'offline' ) {\r\n            dispatch( setErrorMessage( 'Check your connection and try again' ) )\r\n            return\r\n         } else if( errType && errType === 'wrongURL' ) {\r\n            history.replace( '/' )\r\n            return\r\n         }\r\n         dispatch( setErrorMessage( false ) )\r\n         dispatch( setFinalText( content ) )\r\n         dispatch( setTextslist({ id, content }) )\r\n         \r\n      } catch ( error ) {\r\n         dispatch( setLoadingFalse() )\r\n      }\r\n   }\r\n}\r\n\r\n// syncronous actions\r\n\r\nexport const setDropdown = ( texts ) => ({\r\n   type: types.textDropdown,\r\n   payload: texts\r\n})\r\n\r\nexport const setFinalText = ( text ) => ({\r\n   type: types.textSetFinalText,\r\n   payload: text\r\n})\r\n\r\nexport const setTextslist = ( text ) => ({\r\n   type: types.textSetTextsList,\r\n   payload: text\r\n})\r\n\r\nexport const setTypingTextId = ( textId ) => ({\r\n   type: types.textSetTypingTextId,\r\n   payload: textId\r\n})\r\n","import { Button } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { restart, setActive, setFalse } from '../../actions/ui'\r\n\r\nexport const ButtonsAndLogic = () => {\r\n   // Hooks\r\n   const dispatch = useDispatch()\r\n   const { finished, active } = useSelector( state => state.ui )\r\n\r\n   const [ startStop, setStartStop ] = useState( false )\r\n\r\n   // handlers\r\n   const handleStart = ( e ) => {\r\n      setStartStop( false )\r\n      dispatch( setActive() )\r\n      document.getElementById( 'start' ).blur()\r\n      document.querySelector( '#hidden' ).focus()\r\n\r\n   }\r\n   const handleStop = () => {\r\n      setStartStop( true )\r\n      dispatch( setFalse() )\r\n   }\r\n   const handleRestart = () => {\r\n      setStartStop( false )\r\n      dispatch( restart() )\r\n      document.getElementById( 'restart' ).blur()\r\n      document.querySelector( '.intoView' ).scrollIntoView()\r\n      const container = document.querySelector( '.typingText-container' )\r\n      const spans = [...container.children]\r\n      spans.forEach( span => {\r\n         span.classList.remove( 'success-text' )\r\n         span.classList.remove( 'fail-text' )\r\n      })\r\n      document.querySelector( '#hidden' ).focus()\r\n   }\r\n   \r\n\r\n   let component;\r\n   if( active && !finished ) component = <Button onClick={ handleStop } variant=\"contained\" color=\"primary\">Stop</Button>\r\n\r\n   else if( !active && !finished && startStop ) component = <Button autoFocus id=\"start\" onClick={ handleStart } variant=\"contained\" color=\"primary\">Continue</Button>\r\n\r\n   else if( !active && !finished ) component = <Button autoFocus id=\"start\" onClick={ handleStart } variant=\"contained\" color=\"primary\">Start</Button>\r\n   \r\n   else component = ''\r\n\r\n   return (\r\n      <>\r\n         {component}\r\n         <Button id=\"restart\" onClick={handleRestart} variant=\"contained\" color=\"secondary\" >Restart</Button>\r\n         <Link to=\"/\">\r\n            <Button variant=\"contained\" color=\"secondary\" >Home</Button>\r\n         </Link>\r\n      </>\r\n   )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { clean } from '../../actions/ui'\r\nimport { ButtonsAndLogic } from './ButtonsAndLogic'\r\n\r\nexport const ButtonsContainer = () => {\r\n   const dispatch = useDispatch()\r\n   useEffect( () => {\r\n      \r\n      return () => {\r\n         dispatch( clean() )\r\n      }\r\n   }, [dispatch] )\r\n\r\n   return (\r\n      <div className=\"buttonsContainer\">\r\n         <ButtonsAndLogic />\r\n      </div>\r\n   )\r\n}\r\n","/* eslint-disable space-in-parens */\r\n\r\nimport { setFinished } from '../actions/ui'\r\n\r\nexport const mobileLogic = ( e, container,  datatext, datalength, ite, dispatch, textareaLength, textareaLastValue ) => {\r\n\r\n   let keyValue = e.nativeEvent.data // 'datos jdkjfdk'\r\n   if(container.children.length < 2) return // si no ha cargado el texto, return\r\n\r\n   let txtAreaL = textareaLength.current\r\n   let txtAreaLastVL = textareaLastValue.current\r\n   //                  textareaLastLengthValue\r\n\r\n   // Salto de linea\r\n   if( e.nativeEvent.inputType === 'insertLineBreak' ) keyValue = '\\n'\r\n\r\n   // autocompletado\r\n   let times = false;\r\n   let autocompleteMatched = false\r\n   if( ( txtAreaL - txtAreaLastVL) > 1 ) {\r\n      // para ver si se uso el autocompletado\r\n      times = txtAreaL - txtAreaLastVL\r\n   }\r\n\r\n   // si el autocompletado se uso, verificar que los textos coincidan\r\n   if(times) {\r\n      const datasliced = datatext.slice( textareaLastValue.current, textareaLength.current )\r\n      if(keyValue.includes(datasliced)) autocompleteMatched = true\r\n   }\r\n\r\n   // Si se usa un deleteContentBackward para corregir un error\r\n   /**\r\n    * esta expresion (txtAreaL < txtAreaLastVL) es una simulacion del deleteContentBackward\r\n    * pero para mobiles, si el length actual es menor al del pasado, se elimino una letra\r\n   **/  \r\n   if( e.nativeEvent.inputType === 'deleteContentBackward' || txtAreaL < txtAreaLastVL ) {\r\n\r\n      textareaLastValue.current = textareaLength.current\r\n      if( ite.current === 0) return\r\n      container.children[ite.current - 1].classList.remove( 'success-text' )\r\n      container.children[ite.current - 1].classList.remove( 'fail-text' )\r\n      ite.current--\r\n      return\r\n      \r\n   } else {\r\n      textareaLastValue.current = textareaLength.current\r\n   }\r\n\r\n\r\n   // si la mecanografia coincide sin usar autocompletado\r\n   if( keyValue[keyValue.length - 1] === datatext[ite.current]  ) {\r\n      \r\n      container.children[ite.current].classList.add( 'success-text' )\r\n      ite.current++\r\n\r\n   } else\r\n    // Si la mecanografia falla sin usar autocompletado\r\n    if( !times && keyValue[keyValue.length - 1] !== datatext[ite.current] && datalength > ite.current ){\r\n\r\n      container.children[ite.current].classList.add( 'fail-text' )\r\n      ite.current++\r\n\r\n   }\r\n\r\n   // Si se uso el autoCompleado\r\n   if(times) {\r\n      if(autocompleteMatched) {\r\n         for (let index = 0; index < times; index++) {\r\n            container.children[ite.current].classList.add( 'success-text' )\r\n            ite.current++\r\n         }\r\n      } else {\r\n         for (let index = 0; index < times; index++) {\r\n            container.children[ite.current].classList.add( 'fail-text' )\r\n            ite.current++\r\n         }\r\n      }\r\n   }\r\n\r\n   if( datalength === ite.current ) {\r\n      dispatch( setFinished() )\r\n   }\r\n      \r\n}\r\n\r\n","import { useState } from 'react'\r\n\r\nexport const useForm = ( initialState = {}) => {\r\n    \r\n    const [ values, setValues ] = useState( initialState );\r\n\r\n    const reset = ( resetValue = initialState ) => {\r\n        setValues( resetValue );\r\n    }\r\n\r\n    const handleInputChange = ( e ) => {\r\n\r\n        setValues({\r\n            ...values,\r\n            [ e.target.name ]: e.target.value\r\n        });\r\n\r\n    }\r\n\r\n    return [ values, handleInputChange, reset ];\r\n\r\n}\r\n","import React, { useRef } from 'react'\r\nimport { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { restartFalse } from '../../actions/ui'\r\n// import { logic } from '../../helpers/logic'\r\nimport { mobileLogic } from '../../helpers/mobileLogic'\r\nimport { useForm } from '../../hooks/useForm'\r\n\r\n\r\nexport const StatusMessage = () => {\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const { active, restart } = useSelector( state => state.ui )\r\n\r\n   const [ formValues, handleTextareaChange, reset ] = useForm({\r\n      hidden: ''\r\n   })\r\n\r\n   const { text } = useSelector( state => state.texts )\r\n   // const demoText = useMemo( () => memoSplit( text ), [text] )\r\n   const demoText = text\r\n   let iterator = useRef( 0 )\r\n   let textareaLength = useRef( 0 )\r\n   let textareLastValue = useRef( 0 )\r\n   const container = document.querySelector( '.typingText-container' )\r\n   const datalength = demoText.length\r\n\r\n   useEffect( () => {\r\n\r\n      if( restart ) {\r\n         iterator.current = 0;\r\n         setTimeout( () => {\r\n            dispatch( restartFalse() )\r\n         }, 0 );\r\n         reset()\r\n         textareaLength.current = 0\r\n         textareLastValue.current = 0\r\n      }\r\n      \r\n      \r\n   }, [ restart, dispatch, reset ] );\r\n\r\n   // Calling the main logic function\r\n   const callbackLogicFunction = ( event ) => {\r\n      handleTextareaChange( event )\r\n      textareaLength.current = document.getElementById( 'hidden' ).value.length\r\n\r\n      // TODO: llamar el logic si esta en pc o dispositivo con teclado fisico\r\n      // if( window.innerWidth > 850 ) {\r\n      //    console.log( 'PC' );\r\n      //    logic( event, container, demoText, datalength, iterator, dispatch )\r\n      //    return\r\n      // }\r\n\r\n      mobileLogic( event, container, demoText, datalength, iterator, dispatch, textareaLength, textareLastValue )\r\n   }\r\n\r\n\r\n   useEffect( () => {\r\n\r\n      const hiddenInput = document.getElementById( 'hidden' )\r\n      if( container ) {\r\n         container.onclick = () => {\r\n            if( active ) {\r\n               hiddenInput.focus()\r\n            }\r\n         }\r\n      }\r\n\r\n   }, [ active, container ] )\r\n        \r\n   return (\r\n      <div className=\"statusMessage\">\r\n         {\r\n            active\r\n            ? 'Typing'\r\n            : 'Start or Continue'\r\n         }\r\n         <textarea\r\n         cols=\"10\" rows=\"10\" name=\"hidden\" id=\"hidden\"\r\n         onChange={ callbackLogicFunction }\r\n         value={formValues.hidden}\r\n         style={{\r\n            position: 'absolute', \r\n            right: '15px', \r\n            top: '50px',\r\n            background: 'rgba(9, 1, 18, 0.902)',\r\n            outline: 'none',\r\n            color: 'rgb(9, 1, 18)',\r\n            border: 'none',\r\n            zIndex: '-1',\r\n            opacity: '.0001',\r\n            resize: 'none',\r\n            fontSize: '1px'\r\n         }}\r\n          ></textarea>\r\n      </div>\r\n   )\r\n}\r\n","import React from 'react'\r\nimport { StatusMessage } from './StatusMessage'\r\n\r\nexport const StatsContainer = () => {\r\n   return (\r\n      <div className=\"statsContainer\">\r\n         <StatusMessage />\r\n      </div>\r\n   )\r\n}\r\n","import { Button } from '@material-ui/core'\r\nimport { Cached } from '@material-ui/icons'\r\nimport React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { reloadRequest } from '../../actions/ui'\r\n\r\nexport const ReloadButton = React.memo( () => {\r\n   const dispatch = useDispatch()\r\n   const { loading } = useSelector( state => state.ui )\r\n   const handleReload = () => {\r\n      dispatch( reloadRequest( true ) )\r\n   }\r\n\r\n   return (\r\n      <Button disabled={ loading } onClick={handleReload} type=\"button\"\r\n         startIcon={<Cached />} color=\"secondary\" variant=\"contained\"\r\n      >Retry</Button>\r\n   )\r\n})\r\n","import { KeyboardReturn } from '@material-ui/icons'\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { ReloadButton } from '../utils/ReloadButton'\r\n\r\nexport const TypingText = React.memo( () => {\r\n   const { text } = useSelector( state => state.texts )\r\n   const { active, loading, errorMsg } = useSelector( state => state.ui )\r\n   const demoText = text.split( '' )\r\n\r\n   return (\r\n      <>\r\n      <div className={`typingText-container ${ ( active ) && 'activeContainer'  }`} >\r\n         {\r\n            loading ? <p style={{ textAlign: 'center' }}>Loading...</p>\r\n            : demoText.map( ( letter, index ) => {\r\n               \r\n               if( letter === '\\n' ) return <span className=\"line-break\" key={index}><KeyboardReturn fontSize=\"small\" /><br/></span>\r\n               if( letter === ' ' ) return <span className=\"blank\" key={index}></span>\r\n               else return <span className={`${ ( index < 2 ) ? 'intoView' : ''  }`} key={index}>{letter}</span> \r\n               \r\n            })\r\n         }\r\n      </div>\r\n\r\n\r\n      {/* Error message*/}\r\n      {\r\n         errorMsg \r\n         && \r\n         <div className=\"errorMessage\" style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            marginTop: '.5rem'\r\n            }\r\n         }>\r\n            <div style={{ textAlign: 'center', background: '#0dcaf055', \r\n                     padding: '.5rem',  borderRadius: '.5rem', width: 'max-content' }} >\r\n\r\n               <p>{ errorMsg }<br />\r\n               Last text used is loaded instead\r\n               </p>\r\n               <ReloadButton />\r\n            </div>\r\n\r\n         </div>\r\n      }\r\n      </>      \r\n\r\n   )\r\n})\r\n","import React from 'react'\r\nimport { StatsContainer } from './StatsContainer'\r\nimport { TypingText } from './TypingText'\r\n\r\nexport const TextAndStats = () => {\r\n   return (\r\n      <div className=\"textAndStats-container\">\r\n         <StatsContainer />\r\n         <TypingText />\r\n      </div>\r\n   )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useParams } from 'react-router'\r\nimport { setFinalText, startLoadingTextById } from '../actions/texts'\r\nimport { reloadRequest, setErrorMessage } from '../actions/ui'\r\nimport { getTextFromStore } from '../helpers/getTextFromStore'\r\nimport { ButtonsContainer } from './activePage/ButtonsContainer'\r\nimport { TextAndStats } from './activePage/TextAndStats'\r\n\r\nexport const ActivePage = ({ history }) => {\r\n\r\n   const dispatch = useDispatch()\r\n   const { textsList } = useSelector( state => state.texts )\r\n   const { reloadRequest: reload } = useSelector( state => state.ui )\r\n\r\n   const { demoTextId } = useParams()\r\n\r\n   useEffect( () => {\r\n\r\n      // If the text exists in the store, then take it from there\r\n      if( textsList.length > 0 ) {\r\n         const text = getTextFromStore( textsList, demoTextId )\r\n         if( text ) {\r\n            dispatch( setFinalText( text ) )\r\n            dispatch( reloadRequest( false ) )\r\n            dispatch( setErrorMessage( false ) )\r\n\r\n            return\r\n         }\r\n      }\r\n      // if it does not exist in the store, look for it in the database\r\n      dispatch( startLoadingTextById( demoTextId, history ) )\r\n            \r\n   // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [ demoTextId, dispatch, reload ] )\r\n   \r\n\r\n   return (\r\n      <div className=\"activePage-container\">\r\n         <TextAndStats />\r\n         <ButtonsContainer />\r\n      </div>\r\n   )\r\n}\r\n","\r\nexport const getTextFromStore = ( textsList = [], id ) => {\r\n\r\n   const text = textsList.find( text => text.id === id )\r\n   if( !text ) return false\r\n   return text.content\r\n}\r\n","import React from 'react'\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setTypingTextId } from '../../actions/texts';\r\nimport { useForm } from '../../hooks/useForm';\r\n\r\nexport const Dropdown = () => {\r\n   const dispatch = useDispatch()\r\n   const { typingTextsDropdown, typingTextId } = useSelector( state => state.texts )\r\n   const { loading } = useSelector( state => state.ui )\r\n\r\n   const [ formValues, handleInputChange ] = useForm({\r\n      demoTextId: ''\r\n   })\r\n   const { demoTextId } = formValues\r\n\r\n   useEffect( () => {\r\n      \r\n      dispatch( setTypingTextId( demoTextId ) )\r\n\r\n   }, [ demoTextId, dispatch ] )\r\n\r\n   useEffect( () => {\r\n      if( !typingTextId && typingTextsDropdown.length > 0 ) {\r\n         dispatch( setTypingTextId( typingTextsDropdown[0].id ) )\r\n      } \r\n      \r\n   }, [ typingTextId, dispatch, typingTextsDropdown ] )\r\n\r\n   return (\r\n      <>\r\n       <select onChange={handleInputChange} className=\"main-select\" name=\"demoTextId\" id=\"demo-text\">\r\n      {\r\n         loading && <option>Loading...</option>\r\n      }\r\n      {\r\n         typingTextsDropdown &&\r\n         typingTextsDropdown.map( text => (\r\n            <option key={ text.id } value={text.id}>{text.title}</option>\r\n         ) )\r\n      }\r\n      </select>\r\n      </>\r\n   )\r\n}\r\n","import { Button } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const StartButton = React.memo( () => {\r\n   const { typingTextId } = useSelector( state => state.texts )\r\n\r\n   return (\r\n      <div>\r\n         <Link to={`/typing/${ typingTextId }`}>\r\n            <Button variant=\"contained\" color=\"primary\" >Start Typing!</Button>\r\n         </Link>\r\n      </div>\r\n   )\r\n})\r\n","import React from 'react'\r\n\r\nexport const About = () => {\r\n\r\n   return (\r\n      <p>This web aplication is made with React. Every time you load a new text is automatically stored, so while you keep the tab open if you go offline or want to practice again with texts that you already used, the text will be take it from the \"Store\" and not from the Web (Basically it won't use your Internet again and again). When you are done and close the tab, all stored texts will be deleted</p>\r\n   )\r\n}\r\n","import React from 'react'\r\nimport { KeyboardReturn } from '@material-ui/icons'\r\n\r\nexport const UsageGuide = React.memo( () => {\r\n\r\n   const spanStyle = {\r\n      position: 'relative',\r\n      color: 'yellow'\r\n   }\r\n   const iconStyle = {\r\n      position: 'absolute',\r\n      left: '5px'\r\n   }\r\n\r\n   return (\r\n      <ul style={{ marginTop: 0 }}>\r\n         <li>\r\n            If you want to choose another text, click \"HOME\" and select the one you prefer\r\n         </li>\r\n         <li>\r\n            Line-breaks (Enter key) are represented with this icon <span style={spanStyle}> <KeyboardReturn style={iconStyle} /></span>\r\n         </li>\r\n         <li>\r\n            If you are on mobile and hide the keyboard and want it to appear again, touch the text. Or touch the button stop/continue\r\n         </li>\r\n      </ul>\r\n   )\r\n})\r\n","import React, { useState } from 'react'\r\nimport { About } from './About'\r\nimport { UsageGuide } from './UsageGuide'\r\n\r\nexport const TextContent = React.memo( () => {\r\n\r\n   const [ showAbout, setShowAbout ] = useState( false )\r\n\r\n   const aboutStyles = {\r\n      marginBottom: '1.2rem', \r\n      marginTop: '2.1rem',\r\n      cursor: 'pointer',\r\n      width: 'max-content' \r\n   }\r\n\r\n   const handleShow = () => {\r\n      setShowAbout( !showAbout )\r\n   }\r\n   return (\r\n      <div className=\"text-content\">\r\n         <p>Choose one demo-text from the above dropdown menu and click <b>Start Typing</b></p>\r\n         <h4 style={{ marginBottom: '.5rem', marginTop: '1.7rem' }}>Usage Guide</h4>\r\n         <UsageGuide />\r\n         <h4 onClick={ handleShow } style={ aboutStyles }>About the App</h4>\r\n         {\r\n            showAbout \r\n            &&\r\n            <About />\r\n         }\r\n         \r\n      </div>\r\n   )\r\n})\r\n","import React from 'react'\r\n\r\nexport const Title = React.memo( () => {\r\n   return (\r\n      <h1>\r\n         Typing Web App\r\n      </h1>\r\n   )\r\n})\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { ReloadButton } from '../utils/ReloadButton'\r\nimport { Dropdown } from './Dropdown'\r\nimport { StartButton } from './StartButton'\r\nimport { TextContent } from './TextContent'\r\nimport { Title } from './Title'\r\n\r\nexport const MainContent = () => {\r\n   const { errorMsg } = useSelector( state => state.ui )\r\n   const { typingTextsDropdown } = useSelector( state => state.texts )\r\n\r\n   return (\r\n      <div className=\"mainContent-container\">\r\n         <Title />\r\n\r\n         {/* Error message*/}\r\n         {\r\n            ( typingTextsDropdown.length < 1 && errorMsg )\r\n            &&\r\n            <div id=\"reload-btn-container\" style={\r\n               { textAlign: 'center', background: '#0dcaf055', \r\n                  padding: '.75rem', marginBottom: '.7rem', borderRadius: '.5rem' }\r\n               } >\r\n               <p>{errorMsg}</p>\r\n               <ReloadButton />\r\n            </div>\r\n         }\r\n         \r\n         <Dropdown />\r\n         <TextContent />\r\n         <StartButton />\r\n      </div>\r\n   )\r\n}\r\n","import React from 'react'\r\nimport { Button } from '@material-ui/core'\r\nimport { AccountBox } from '@material-ui/icons'\r\n\r\nexport const Sidebar = React.memo( () => {\r\n   return (\r\n      <aside className=\"sidebar\">\r\n         <h3>SIDEBAR / LOGIN</h3>\r\n         <div className=\"sidebar-card\">\r\n            <Button\r\n               disabled\r\n               className=\"navbar-btn\" \r\n               variant=\"contained\" \r\n               color=\"primary\"\r\n               startIcon={<AccountBox />}\r\n            >Login</Button>\r\n         </div>\r\n         <div className=\"sidebar-card\">\r\n            <p>Login disabled</p>\r\n         </div>\r\n      </aside>\r\n   )\r\n})\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { startLoadingTextsId } from '../actions/texts'\r\nimport { MainContent } from './homePage/MainContent'\r\nimport { Sidebar } from './ui/sidebar/Sidebar'\r\n\r\nexport const HomePage = () => {\r\n\r\n   const dispatch = useDispatch()\r\n\r\n   const { reloadRequest } = useSelector( state => state.ui )\r\n   const { typingTextsDropdown } = useSelector( state => state.texts )\r\n\r\n   useEffect( () => {\r\n      if( typingTextsDropdown === '' || typingTextsDropdown.length < 1 ) {\r\n         dispatch( startLoadingTextsId() )\r\n      }\r\n\r\n   // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [ dispatch, reloadRequest ] )\r\n\r\n\r\n   return (\r\n      <div className=\"home-container\">\r\n         <MainContent />\r\n         <Sidebar />\r\n      </div>\r\n   )\r\n}\r\n","import React from 'react'\r\n\r\nimport {\r\n   HashRouter as Router,\r\n   Switch,\r\n   Route,\r\n   Redirect,\r\n } from 'react-router-dom';\r\nimport { ActivePage } from '../components/ActivePage';\r\nimport { HomePage } from '../components/HomePage';\r\n\r\nexport const AppRouter = () => {\r\n\r\n   return (\r\n      <Router>\r\n         <div>\r\n            <Switch>\r\n               <Route exact path=\"/typing/:demoTextId\" component={ ActivePage } />\r\n               <Route exact path=\"/\" component={ HomePage } />\r\n               <Redirect to=\"/\" />\r\n            </Switch>\r\n         </div>\r\n      </Router>\r\n   )\r\n}\r\n","import { types } from '../types/types';\r\n\r\nconst initialState = {\r\n   typingTextId: '',\r\n   typingTextsDropdown: '',\r\n   textsList: [],\r\n   text: ''\r\n}\r\n\r\nexport const textsReducer = ( state = initialState, action ) => {\r\n\r\n   switch ( action.type ) {\r\n      case types.textSetTypingTextId:\r\n         return {\r\n            ...state,\r\n            typingTextId: action.payload\r\n         }\r\n      case types.textDropdown:\r\n         return {\r\n            ...state,\r\n            typingTextsDropdown: action.payload\r\n         }\r\n      case types.textSetFinalText:\r\n         return {\r\n            ...state,\r\n            text: action.payload\r\n         }\r\n      case types.textSetTextsList:\r\n         return {\r\n            ...state,\r\n            textsList: [ action.payload, ...state.textsList ]\r\n         }\r\n         \r\n      default:\r\n         return state\r\n   }\r\n   \r\n}\r\n","import { types } from '../types/types';\r\n\r\n/* \r\n   {\r\n      active: false\r\n      finished: false\r\n   }\r\n*/\r\nconst initialState = {\r\n   active: false,\r\n   finished: false,\r\n   lastPath: null,\r\n   loading: false,\r\n   errorMsg: false,\r\n   reloadRequest: false,\r\n   restart: false\r\n} \r\n\r\nexport const uiReducer = ( state = initialState, action ) => {\r\n\r\n   switch ( action.type ) {\r\n      case types.uiSetActiveTrue:\r\n         return {\r\n            ...state,\r\n            active: true\r\n         }\r\n      case types.uiSetActiveFalse:\r\n         return {\r\n            ...state,\r\n            active: false\r\n         }\r\n\r\n      case types.uiSetFinished:\r\n         return {\r\n            ...state,\r\n            finished: true,\r\n            active: false\r\n         }\r\n      case types.uiRestart:\r\n         return {\r\n            ...state,\r\n            finished: false,\r\n            active: true,\r\n            restart: true\r\n         }\r\n      case types.uiRestartFalse:\r\n         return {\r\n            ...state,\r\n            restart: false\r\n         }\r\n      case types.uiClean:\r\n         return {\r\n            ...state,\r\n            finished: false,\r\n            active: false\r\n         }\r\n      case types.uiSetLastPath:\r\n         return {\r\n            ...state,\r\n            lastPath: action.payload\r\n         }\r\n      case types.uiSetLoadingTrue:\r\n         return {\r\n            ...state,\r\n            loading: true\r\n         }\r\n      case types.uiSetLoadingFalse:\r\n         return {\r\n            ...state,\r\n            loading: false\r\n         }\r\n\r\n      case types.uiErrorMsg:\r\n         return {\r\n            ...state,\r\n            errorMsg: action.payload\r\n         }\r\n\r\n      case types.uiReloadRequest:\r\n         return {\r\n            ...state,\r\n            reloadRequest: action.payload\r\n         }\r\n   \r\n      default:\r\n         return state\r\n   }\r\n}\r\n","import { combineReducers, compose, createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { textsReducer } from '../reducers/textsReducer';\r\nimport { uiReducer } from '../reducers/uiReducer';\r\n\r\n\r\nconst composeEnhancers = ( typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ) || compose;\r\n\r\n\r\nconst reducers = combineReducers({\r\n   texts: textsReducer,\r\n   ui: uiReducer\r\n})\r\n\r\nexport const store = createStore(\r\n   reducers,\r\n   composeEnhancers(\r\n      applyMiddleware( thunk )\r\n   )\r\n)\r\n","import { createMuiTheme, ThemeProvider } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport { AppRouter } from './routers/AppRouter'\r\nimport { store } from './store/store'\r\nimport './styles/styles.scss'\r\n\r\nexport const TypingApp = () => {\r\n\r\n   // TODO: en mobile, que funcione con el autocompletado de palabras\r\n\r\n   const theme = createMuiTheme({\r\n      palette: {\r\n         primary: {\r\n            main: '#F50057'\r\n         },\r\n         secondary: {\r\n            main: '#1B3A4B'\r\n         }\r\n      }\r\n   })\r\n   return (\r\n      <Provider store={store} >\r\n         <ThemeProvider theme={theme}>\r\n            <AppRouter />\r\n         </ThemeProvider>\r\n      </Provider>\r\n   )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { TypingApp } from './TypingApp'\r\nReactDOM.render(\r\n  <TypingApp />,\r\n  document.getElementById( 'root' )\r\n);\r\n\r\n"],"sourceRoot":""}