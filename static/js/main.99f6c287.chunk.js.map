{"version":3,"sources":["firebase/firebase-config.js","helpers/getTextById.js","helpers/getTextFirestore.js","types/types.js","actions/ui.js","actions/texts.js","helpers/logic.js","components/activePage/ButtonsAndLogic.jsx","components/activePage/ButtonsContainer.jsx","components/activePage/StatusMessage.jsx","components/activePage/StatsContainer.jsx","components/utils/ReloadButton.jsx","components/activePage/TypingText.jsx","components/activePage/TextAndStats.jsx","components/ActivePage.jsx","helpers/getTextFromStore.js","components/homePage/Dropdown.jsx","hooks/useForm.js","components/homePage/StartButton.jsx","components/homePage/About.jsx","components/homePage/UsageGuide.jsx","components/homePage/TextContent.jsx","components/homePage/Title.jsx","components/homePage/MainContent.jsx","components/ui/sidebar/Sidebar.jsx","components/HomePage.jsx","routers/AppRouter.jsx","reducers/textsReducer.js","reducers/uiReducer.js","store/store.js","TypingApp.jsx","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","loadTextById","id","a","doc","get","undefined","textSnap","data","content","errType","loadTextsId","collection","orderBy","textsSnap","texts","forEach","snapChild","push","console","error","types","setLoadingTrue","type","setLoadingFalse","setErrorMessage","msg","payload","reloadRequest","state","setDropdown","setFinalText","text","setTextslist","setTypingTextId","textId","logic","e","container","datatext","datalength","ite","dispatch","key","document","querySelector","focus","value","length","keyValue","current","children","classList","remove","add","ButtonsAndLogic","useDispatch","useSelector","ui","finished","active","useState","startStop","setStartStop","demoText","split","iterator","useRef","useEffect","callbackFunction","event","addEventListener","removeEventListener","component","handleStart","getElementById","blur","Button","onClick","variant","color","autoFocus","span","to","ButtonsContainer","className","StatusMessage","name","style","position","right","top","background","outline","border","zIndex","opacity","StatsContainer","ReloadButton","React","memo","loading","disabled","startIcon","Cached","TypingText","errorMsg","textAlign","map","letter","index","KeyboardReturn","fontSize","display","justifyContent","marginTop","padding","borderRadius","width","TextAndStats","ActivePage","history","textsList","reload","demoTextId","useParams","find","getTextFromStore","replace","startLoadingTextById","Dropdown","typingTextsDropdown","typingTextId","initialState","values","setValues","target","useForm","formValues","handleInputChange","onChange","title","StartButton","About","UsageGuide","left","TextContent","showAbout","setShowAbout","marginBottom","cursor","Title","MainContent","Sidebar","AccountBox","HomePage","AppRouter","exact","path","lastPath","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","TypingApp","theme","createMuiTheme","palette","primary","main","secondary","ThemeProvider","ReactDOM","render"],"mappings":"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","file":"static/js/main.99f6c287.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nconst firebaseConfig = {\n   apiKey: 'AIzaSyAu8R2dliBO2nQ3pc5MvX0to1k8t2n7gtQ',\n   authDomain: 'react-practices-b915b.firebaseapp.com',\n   databaseURL: 'https://react-practices-b915b-default-rtdb.firebaseio.com',\n   projectId: 'react-practices-b915b',\n   storageBucket: 'react-practices-b915b.appspot.com',\n   messagingSenderId: '350501490135',\n   appId: '1:350501490135:web:c830a5bc1321bd4b22cf92',\n   measurementId: 'G-L53B3RPBQG'\n };\n// Initialize Firebase\nfirebase.initializeApp( firebaseConfig );\n\nconst db = firebase.firestore();\n\n// const googleAuthProvider = new firebase.auth.GoogleAuthProvider()\n\nexport { db, firebase }\n","import { db } from '../firebase/firebase-config';\n\n\nexport const loadTextById = async( id ) => {\n\n   try {\n      const textSnap = await db.doc( `texts/content/paragraphs/${id}` ).get()\n      if( textSnap.data() !== undefined ) {\n         return {\n            id,\n            ...textSnap.data(),\n         }\n      } else return { content: false, errType: 'wrongURL' } \n\n   } catch ( error ) {\n      if( error ) {\n         return { content: false, errType: 'offline' }\n      } else return { content: false, errType: 'wrongURL' }\n      \n   }\n\n}\n","import { db } from '../firebase/firebase-config';\n\n\nexport const loadTextsId = async() => {\n\n   try {\n      const textsSnap = await db.collection( 'texts/ids/ids-title' ).orderBy( 'title' ).get()\n      const texts = [];\n      textsSnap.forEach( snapChild => {\n         texts.push({\n            id: snapChild.id,\n            ...snapChild.data()\n         })\n      })\n      return texts\n   } catch ( error ) {\n      console.error( error )\n      return []\n   }\n\n}\n","\nexport const types = {\n   \n   uiSetActiveTrue: '[UI] Set active true',\n   uiSetActiveFalse: '[UI] Set active false',\n   uiSetFinished: '[UI] Set finished',\n   uiRestart: '[UI] Restart',\n   uiClean: '[UI] Clean',\n   uiSetLastPath: '[UI] last path',\n   uiSetLoadingTrue: '[UI] loading true',\n   uiSetLoadingFalse: '[UI] loading false',\n   uiErrorMsg: '[UI] error message',\n   uiReloadRequest: '[UI] reload request',\n   \n   textDropdown: '[Text] set dropdown',\n   textSetFinalText: '[Text] final Text request',\n   textSetTextsList: '[Text] texts List',\n   textSetTypingTextId: '[Text] SetTypingTextId',\n}\n","import { types } from '../types/types';\n\n\nexport const setActive = () => ({\n   type: types.uiSetActiveTrue,\n})\n\nexport const setFalse = () => ({\n   type: types.uiSetActiveFalse\n})\n\nexport const setFinished = () => ({\n   type: types.uiSetFinished,\n\n})\n\nexport const restart = () => ({\n   type: types.uiRestart\n})\n\nexport const clean = () => ({\n   type: types.uiClean\n})\n\nexport const setLastPathId = ( path ) => ({\n   type: types.uiSetLastPath,\n   payload: path\n})\n\nexport const setLoadingTrue = () => ({\n   type: types.uiSetLoadingTrue,\n})\nexport const setLoadingFalse = () => ({\n   type: types.uiSetLoadingFalse,\n})\n\nexport const setErrorMessage = ( msg ) => ({\n   type: types.uiErrorMsg,\n   payload: msg\n})\n\nexport const reloadRequest = ( state ) => ({\n   type: types.uiReloadRequest,\n   payload: state\n})\n","import { loadTextById } from '../helpers/getTextById'\nimport { loadTextsId } from '../helpers/getTextFirestore'\nimport { types } from '../types/types'\nimport { reloadRequest, setErrorMessage, setLoadingFalse, setLoadingTrue } from './ui'\n\nexport const startLoadingTextsId = () => {\n   return async( dispatch ) => {\n\n      dispatch( setLoadingTrue() )\n\n         const texts = await loadTextsId()\n\n         if( texts.length < 1 ) {\n            dispatch( setErrorMessage( 'Check your connection and try again' ) )\n            \n         } else dispatch( setErrorMessage( false ) )\n         dispatch( reloadRequest( false ) )\n         dispatch( setLoadingFalse() )\n         dispatch( setDropdown( texts ) )\n\n   }\n}\n\nexport const startLoadingTextById = ( textId, history ) => {\n   return async( dispatch ) => {\n      dispatch( setLoadingTrue() )\n      try {\n         const { content, id, errType } = await loadTextById( textId )\n         dispatch( setLoadingFalse() )\n         dispatch( reloadRequest( false ) )\n\n         if( errType && errType === 'offline' ) {\n            dispatch( setErrorMessage( 'Check your connection and try again' ) )\n            return\n         } else if( errType && errType === 'wrongURL' ) {\n            history.replace( '/' )\n            return\n         }\n         dispatch( setErrorMessage( false ) )\n         dispatch( setFinalText( content ) )\n         dispatch( setTextslist({ id, content }) )\n         \n      } catch ( error ) {\n         dispatch( setLoadingFalse() )\n      }\n   }\n}\n\n// syncronous actions\n\nexport const setDropdown = ( texts ) => ({\n   type: types.textDropdown,\n   payload: texts\n})\n\nexport const setFinalText = ( text ) => ({\n   type: types.textSetFinalText,\n   payload: text\n})\n\nexport const setTextslist = ( text ) => ({\n   type: types.textSetTextsList,\n   payload: text\n})\n\nexport const setTypingTextId = ( textId ) => ({\n   type: types.textSetTypingTextId,\n   payload: textId\n})\n","/* eslint-disable space-in-parens */\n\nimport { setFinished } from '../actions/ui'\n\nexport const logic = ( e, container,  datatext, datalength, ite, dispatch) => {\n   if(e.key === ' ') {\n      document.querySelector('#hidden').focus()\n      document.querySelector('#hidden').value = ''\n   }\n   if( e.key.length > 2 && e.key !== 'Enter' && e.key !== 'Backspace') return\n   const keyValue = ( e.key === 'Enter' ) ? '\\n' : e.key\n   \n   // Si se usa un backpace para corregir un error\n   if( e.key === 'Backspace') {\n      if( ite.current === 0) return\n      container.children[ite.current - 1].classList.remove( 'success-text' )\n      container.children[ite.current - 1].classList.remove( 'fail-text' )\n      ite.current--\n      return\n   }         \n   // Si la mecanografia coincide\n   if( keyValue === datatext[ite.current] ) {\n      \n      container.children[ite.current].classList.add( 'success-text' )\n      ite.current++\n\n   } else\n   \n   // Si la mecanografia falla\n   if( keyValue !== datatext[ite.current] && datalength > ite.current ){\n      container.children[ite.current].classList.add( 'fail-text' )\n      ite.current++\n   }\n\n   // cuando se finaliza la mecanografia\n   if( datalength === ite.current ) {\n      dispatch( setFinished() )\n   }\n      \n}\n","import { Button } from '@material-ui/core'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { restart, setActive, setFalse } from '../../actions/ui'\nimport { logic } from '../../helpers/logic'\n\nexport const ButtonsAndLogic = () => {\n   // Hooks\n   const dispatch = useDispatch()\n   const { finished, active } = useSelector( state => state.ui )\n\n   const [ startStop, setStartStop ] = useState( false )\n\n   /* This effect is responsible of the main Typing logic  */\n   const { text } = useSelector( state => state.texts )\n   // const demoText = typingTexts[0].content.split( '' )\n   const demoText = text.split( '' )\n\n   let iterator = useRef( 0 )\n   const container = document.querySelector( '.typingText-container' )\n\n   useEffect( () => {\n      \n      const datalength = demoText.length\n\n      const callbackFunction = ( event ) => {\n         logic( event, container, demoText, datalength, iterator, dispatch )\n      }\n\n      if( active ) {\n         document.addEventListener( 'keydown', callbackFunction )\n      } else {\n         document.removeEventListener( 'keydown', callbackFunction )\n      }\n\n      return () => {\n         document.removeEventListener( 'keydown', callbackFunction )\n      }\n\n   }, [ active, dispatch, container, demoText ] )\n   // end hooks\n\n   // handlers\n   const handleStart = ( e ) => {\n      setStartStop( false )\n      dispatch( setActive() )\n      document.getElementById( 'start' ).blur()\n   }\n   const handleStop = () => {\n      setStartStop( true )\n      dispatch( setFalse() )\n   }\n   const handleRestart = () => {\n      setStartStop( false )\n      dispatch( restart() )\n      document.getElementById( 'restart' ).blur()\n\n      iterator.current = 0\n      // reset and remove the classes for all the span elements\n      const spans = [...container.children]\n      spans.forEach( span => {\n         span.classList.remove( 'success-text' )\n         span.classList.remove( 'fail-text' )\n      })\n   }\n\n   let component;\n   if( active && !finished ) component = <Button onClick={ handleStop } variant=\"contained\" color=\"primary\">Stop</Button>\n\n   else if( !active && !finished && startStop ) component = <Button autoFocus id=\"start\" onClick={ handleStart } variant=\"contained\" color=\"primary\">Continue</Button>\n\n   else if( !active && !finished ) component = <Button autoFocus id=\"start\" onClick={ handleStart } variant=\"contained\" color=\"primary\">Start</Button>\n   \n   else component = ''\n\n   return (\n      <>\n         {component}\n         <Button id=\"restart\" onClick={handleRestart} variant=\"contained\" color=\"secondary\" >Restart</Button>\n         <Link to=\"/\">\n            <Button variant=\"contained\" color=\"secondary\" >Home</Button>\n         </Link>\n      </>\n   )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { clean } from '../../actions/ui'\nimport { ButtonsAndLogic } from './ButtonsAndLogic'\n\nexport const ButtonsContainer = () => {\n   const dispatch = useDispatch()\n   useEffect( () => {\n      \n      return () => {\n         dispatch( clean() )\n      }\n   }, [dispatch] )\n\n   return (\n      <div className=\"buttonsContainer\">\n         <ButtonsAndLogic />\n      </div>\n   )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nexport const StatusMessage = () => {\n\n   const { active } = useSelector( state => state.ui )\n   return (\n      <div className=\"statusMessage\">\n         {\n            active\n            ? 'Typing'\n            : 'Start or Continue'\n         }\n         <input\n          type=\"text\" name=\"hidden\" id=\"hidden\"\n          style={{\n            position: 'absolute', \n            right: '15px', \n            top: '50px',\n            background: 'rgba(9, 1, 18, 0.902)',\n            outline: 'none',\n            color: 'rgb(9, 1, 18)',\n            border: 'none',\n            zIndex: '-1',\n            opacity: '.001'\n         }}\n          />\n      </div>\n   )\n}\n","import React from 'react'\nimport { StatusMessage } from './StatusMessage'\n\nexport const StatsContainer = () => {\n   return (\n      <div className=\"statsContainer\">\n         <StatusMessage />\n      </div>\n   )\n}\n","import { Button } from '@material-ui/core'\nimport { Cached } from '@material-ui/icons'\nimport React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { reloadRequest } from '../../actions/ui'\n\nexport const ReloadButton = React.memo( () => {\n   const dispatch = useDispatch()\n   const { loading } = useSelector( state => state.ui )\n   const handleReload = () => {\n      dispatch( reloadRequest( true ) )\n   }\n\n   return (\n      <Button disabled={ loading } onClick={handleReload} type=\"button\"\n         startIcon={<Cached />} color=\"secondary\" variant=\"contained\"\n      >Retry</Button>\n   )\n})\n","import { KeyboardReturn } from '@material-ui/icons'\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport { ReloadButton } from '../utils/ReloadButton'\n\nexport const TypingText = React.memo( () => {\n   const { text } = useSelector( state => state.texts )\n   const { active, loading, errorMsg } = useSelector( state => state.ui )\n   const demoText = text.split( '' )\n\n   return (\n      <>\n      <div className={`typingText-container ${ ( active ) && 'activeContainer'  }`} >\n         {\n            loading ? <p style={{ textAlign: 'center' }}>Loading...</p>\n            : demoText.map( ( letter, index ) => {\n               \n               if( letter === '\\n' ) return <span className=\"line-break\" key={index}><KeyboardReturn fontSize=\"small\" /><br/></span>\n               // if( letter === '\\t' ) return <span className=\"line-break\" key={index}> \\t</span>\n               if( letter === ' ' ) return <span className=\"blank\" key={index}></span>\n               else return <span key={index}>{letter}</span> \n               \n            })\n         }\n      </div>\n\n\n      {/* Error message*/}\n      {\n         errorMsg \n         && \n         <div className=\"errorMessage\" style={{\n            display: 'flex',\n            justifyContent: 'center',\n            marginTop: '.5rem'\n            }\n         }>\n            <div style={{ textAlign: 'center', background: '#0dcaf055', \n                     padding: '.5rem',  borderRadius: '.5rem', width: 'max-content' }} >\n\n               <p>{ errorMsg }<br />\n               Last text used is loaded instead\n               </p>\n               <ReloadButton />\n            </div>\n\n         </div>\n      }\n      </>      \n\n   )\n})\n","import React from 'react'\nimport { StatsContainer } from './StatsContainer'\nimport { TypingText } from './TypingText'\n\nexport const TextAndStats = () => {\n   return (\n      <div className=\"textAndStats-container\">\n         <StatsContainer />\n         <TypingText />\n      </div>\n   )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams } from 'react-router'\nimport { setFinalText, startLoadingTextById } from '../actions/texts'\nimport { reloadRequest, setErrorMessage } from '../actions/ui'\nimport { getTextFromStore } from '../helpers/getTextFromStore'\nimport { ButtonsContainer } from './activePage/ButtonsContainer'\nimport { TextAndStats } from './activePage/TextAndStats'\n\nexport const ActivePage = ({ history }) => {\n\n   const dispatch = useDispatch()\n   const { textsList } = useSelector( state => state.texts )\n   const { reloadRequest: reload } = useSelector( state => state.ui )\n\n   const { demoTextId } = useParams()\n\n   useEffect( () => {\n\n      // If the text exists in the store, then take it from there\n      if( textsList.length > 0 ) {\n         const text = getTextFromStore( textsList, demoTextId )\n         if( text ) {\n            dispatch( setFinalText( text ) )\n            dispatch( reloadRequest( false ) )\n            dispatch( setErrorMessage( false ) )\n\n            return\n         }\n      }\n      // if it does not exist in the store, look for it in the database\n      dispatch( startLoadingTextById( demoTextId, history ) )\n            \n   // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [ demoTextId, dispatch, reload ] )\n   \n\n   return (\n      <div className=\"activePage-container\">\n         <TextAndStats />\n         <ButtonsContainer />\n      </div>\n   )\n}\n","\nexport const getTextFromStore = ( textsList = [], id ) => {\n\n   const text = textsList.find( text => text.id === id )\n   if( !text ) return false\n   return text.content\n}\n","import React from 'react'\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setTypingTextId } from '../../actions/texts';\nimport { useForm } from '../../hooks/useForm';\n\nexport const Dropdown = () => {\n   const dispatch = useDispatch()\n   const { typingTextsDropdown, typingTextId } = useSelector( state => state.texts )\n   const { loading } = useSelector( state => state.ui )\n\n   const [ formValues, handleInputChange ] = useForm({\n      demoTextId: ''\n   })\n   const { demoTextId } = formValues\n\n   useEffect( () => {\n      \n      dispatch( setTypingTextId( demoTextId ) )\n\n   }, [ demoTextId, dispatch ] )\n\n   useEffect( () => {\n      if( !typingTextId && typingTextsDropdown.length > 0 ) {\n         dispatch( setTypingTextId( typingTextsDropdown[0].id ) )\n      } \n      \n   }, [ typingTextId, dispatch, typingTextsDropdown ] )\n\n   return (\n      <>\n       <select onChange={handleInputChange} className=\"main-select\" name=\"demoTextId\" id=\"demo-text\">\n      {\n         loading && <option>Loading...</option>\n      }\n      {\n         typingTextsDropdown &&\n         typingTextsDropdown.map( text => (\n            <option key={ text.id } value={text.id}>{text.title}</option>\n         ) )\n      }\n      </select>\n      </>\n   )\n}\n","import { useState } from 'react'\n\nexport const useForm = ( initialState = {}) => {\n    \n    const [ values, setValues ] = useState( initialState );\n\n    const reset = () => {\n        setValues( initialState );\n    }\n\n    const handleInputChange = ( e ) => {\n\n        setValues({\n            ...values,\n            [ e.target.name ]: e.target.value\n        });\n\n    }\n\n    return [ values, handleInputChange, reset ];\n\n}\n","import { Button } from '@material-ui/core'\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nexport const StartButton = React.memo( () => {\n   const { typingTextId } = useSelector( state => state.texts )\n\n   return (\n      <div>\n         <Link to={`/typing/${ typingTextId }`}>\n            <Button variant=\"contained\" color=\"primary\" >Start Typing!</Button>\n         </Link>\n      </div>\n   )\n})\n","import React from 'react'\n\nexport const About = () => {\n\n   return (\n      <p>Welcome to our typing practice app! 🎯 This friendly tool helps you improve your typing speed and accuracy in a comfortable, distraction-free environment. Simply choose a text from the dropdown menu above and start practicing at your own pace. \n\n      <br/><br/>\n\n      We've designed the app to work smartly with your internet connection - once you load a text, it's automatically saved for your current session. This means you can practice the same passages even if you go offline, without needing to reload them. When you close the tab, everything resets fresh for your next visit.\n\n      <br/><br/>\n\n      Whether you're a beginner looking to build confidence or an experienced typist aiming to perfect your skills, this app adapts to your learning journey. Happy typing! ✨</p>\n   )\n}\n","import React from 'react'\nimport { KeyboardReturn } from '@material-ui/icons'\n\nexport const UsageGuide = React.memo( () => {\n\n   const spanStyle = {\n      position: 'relative',\n      color: 'yellow'\n   }\n   const iconStyle = {\n      position: 'absolute',\n      left: '5px'\n   }\n\n   return (\n      <ul style={{ marginTop: 0 }}>\n         <li>\n            If you want to choose another text, click \"HOME\" and select the one you prefer\n         </li>\n         <li>\n            Line-breaks (Enter key) are represented with this icon <span style={spanStyle}> <KeyboardReturn style={iconStyle} /></span>\n         </li>\n      </ul>\n   )\n})\n","import React, { useState } from 'react'\nimport { About } from './About'\nimport { UsageGuide } from './UsageGuide'\n\nexport const TextContent = React.memo( () => {\n\n   const [ showAbout, setShowAbout ] = useState( false )\n\n   const aboutStyles = {\n      marginBottom: '1.2rem', \n      marginTop: '2.1rem',\n      cursor: 'pointer',\n      width: 'max-content' \n   }\n\n   const handleShow = () => {\n      setShowAbout( !showAbout )\n   }\n   return (\n      <div className=\"text-content\">\n         <p>Choose one demo-text from the above dropdown menu and click <b>Start Typing</b></p>\n         <h4 style={{ marginBottom: '.5rem', marginTop: '1.7rem' }}>Usage Guide</h4>\n         <UsageGuide />\n         <h4 onClick={ handleShow } style={ aboutStyles }>About the App</h4>\n         {\n            showAbout \n            &&\n            <About />\n         }\n         \n      </div>\n   )\n})\n","import React from 'react'\n\nexport const Title = React.memo( () => {\n   return (\n      <h1>\n         Typing Web App\n      </h1>\n   )\n})\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { ReloadButton } from '../utils/ReloadButton'\nimport { Dropdown } from './Dropdown'\nimport { StartButton } from './StartButton'\nimport { TextContent } from './TextContent'\nimport { Title } from './Title'\n\nexport const MainContent = () => {\n   const { errorMsg } = useSelector( state => state.ui )\n   const { typingTextsDropdown } = useSelector( state => state.texts )\n\n   return (\n      <div className=\"mainContent-container\">\n         <Title />\n\n         {/* Error message*/}\n         {\n            ( typingTextsDropdown.length < 1 && errorMsg )\n            &&\n            <div style={\n               { textAlign: 'center', background: '#0dcaf055', \n                  padding: '.75rem', marginBottom: '.7rem', borderRadius: '.5rem' }\n               } >\n               <p>{errorMsg}</p>\n               <ReloadButton />\n            </div>\n         }\n         \n         <Dropdown />\n         <TextContent />\n         <StartButton />\n      </div>\n   )\n}\n","import React from 'react'\nimport { Button } from '@material-ui/core'\nimport { AccountBox } from '@material-ui/icons'\n\nexport const Sidebar = React.memo( () => {\n   return (\n      <aside className=\"sidebar\">\n         <h3>SIDEBAR / LOGIN</h3>\n         <div className=\"sidebar-card\">\n            <Button\n               disabled\n               className=\"navbar-btn\" \n               variant=\"contained\" \n               color=\"primary\"\n               startIcon={<AccountBox />}\n            >Login</Button>\n         </div>\n         <div className=\"sidebar-card\">\n            <p>Login disabled</p>\n         </div>\n      </aside>\n   )\n})\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { startLoadingTextsId } from '../actions/texts'\nimport { MainContent } from './homePage/MainContent'\nimport { Sidebar } from './ui/sidebar/Sidebar'\n\nexport const HomePage = () => {\n\n   const dispatch = useDispatch()\n\n   const { reloadRequest } = useSelector( state => state.ui )\n   const { typingTextsDropdown } = useSelector( state => state.texts )\n\n   useEffect( () => {\n      if( typingTextsDropdown === '' || typingTextsDropdown.length < 1 ) {\n         dispatch( startLoadingTextsId() )\n      }\n\n   // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [ dispatch, reloadRequest ] )\n\n\n   return (\n      <div className=\"home-container\">\n         <MainContent />\n         <Sidebar />\n      </div>\n   )\n}\n","import React from 'react'\n\nimport {\n   HashRouter as Router,\n   Switch,\n   Route,\n   Redirect,\n } from 'react-router-dom';\nimport { ActivePage } from '../components/ActivePage';\nimport { HomePage } from '../components/HomePage';\n\nexport const AppRouter = () => {\n\n   return (\n      <Router>\n         <div>\n            <Switch>\n               <Route exact path=\"/typing/:demoTextId\" component={ ActivePage } />\n               <Route exact path=\"/\" component={ HomePage } />\n               <Redirect to=\"/\" />\n            </Switch>\n         </div>\n      </Router>\n   )\n}\n","import { types } from '../types/types';\n\n/*\n {\n    typingText: 'ksdfksj',\n    textarea: ''\n\n }\n*/\nconst initialState = {\n   typingTextId: '',\n   typingTextsDropdown: '',\n   textsList: [],\n   text: ''\n}\n\nexport const textsReducer = ( state = initialState, action ) => {\n\n   switch ( action.type ) {\n      case types.textSetTypingTextId:\n         return {\n            ...state,\n            typingTextId: action.payload\n         }\n      case types.textDropdown:\n         return {\n            ...state,\n            typingTextsDropdown: action.payload\n         }\n      case types.textSetFinalText:\n         return {\n            ...state,\n            text: action.payload\n         }\n      case types.textSetTextsList:\n         return {\n            ...state,\n            textsList: [ action.payload, ...state.textsList ]\n         }\n         \n      default:\n         return state\n   }\n   \n}\n","import { types } from '../types/types';\n\n/* \n   {\n      active: false\n      finished: false\n   }\n*/\nconst initialState = {\n   active: false,\n   finished: false,\n   lastPath: null,\n   loading: false,\n   errorMsg: false,\n   reloadRequest: false,\n} \n\nexport const uiReducer = ( state = initialState, action ) => {\n\n   switch ( action.type ) {\n      case types.uiSetActiveTrue:\n         return {\n            ...state,\n            active: true\n         }\n      case types.uiSetActiveFalse:\n         return {\n            ...state,\n            active: false\n         }\n\n      case types.uiSetFinished:\n         return {\n            ...state,\n            finished: true,\n            active: false\n         }\n      case types.uiRestart:\n         return {\n            ...state,\n            finished: false,\n            active: true\n         }\n      case types.uiClean:\n         return {\n            ...state,\n            finished: false,\n            active: false\n         }\n      case types.uiSetLastPath:\n         return {\n            ...state,\n            lastPath: action.payload\n         }\n      case types.uiSetLoadingTrue:\n         return {\n            ...state,\n            loading: true\n         }\n      case types.uiSetLoadingFalse:\n         return {\n            ...state,\n            loading: false\n         }\n\n      case types.uiErrorMsg:\n         return {\n            ...state,\n            errorMsg: action.payload\n         }\n\n      case types.uiReloadRequest:\n         return {\n            ...state,\n            reloadRequest: action.payload\n         }\n   \n      default:\n         return state\n   }\n}\n","import { combineReducers, compose, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { textsReducer } from '../reducers/textsReducer';\nimport { uiReducer } from '../reducers/uiReducer';\n\n\nconst composeEnhancers = ( typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ) || compose;\n\n\nconst reducers = combineReducers({\n   texts: textsReducer,\n   ui: uiReducer\n})\n\nexport const store = createStore(\n   reducers,\n   composeEnhancers(\n      applyMiddleware( thunk )\n   )\n)\n","import { createMuiTheme, ThemeProvider } from '@material-ui/core'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { AppRouter } from './routers/AppRouter'\nimport { store } from './store/store'\nimport './styles/styles.scss'\n\nexport const TypingApp = () => {\n\n   const theme = createMuiTheme({\n      palette: {\n         primary: {\n            main: '#F50057'\n         },\n         secondary: {\n            main: '#1B3A4B'\n         }\n      }\n   })\n   return (\n      <Provider store={store} >\n         <ThemeProvider theme={theme}>\n            <AppRouter />\n         </ThemeProvider>\n      </Provider>\n   )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { TypingApp } from './TypingApp'\nReactDOM.render(\n  <TypingApp />,\n  document.getElementById( 'root' )\n);\n\n"],"sourceRoot":""}